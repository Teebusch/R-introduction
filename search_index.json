[["index.html", "10 Reasons to Learn R Introduction Who is this for? Who am I? What is R? 10 cool things about R", " 10 Reasons to Learn R Tobias Busch 2021-07-18 Introduction This book started as the the companion material for a workshop I first held on April 6th, 2021 at the ISP ComPros Research group lunch meeting at the University of Oslo. It was a 90 minutes long hands-on introduction to R. The idea was to provide enough insight to help the audience decide whether they should or should not learn it. After the workshop I kept working on the material and eventually my notes turned into something book-like, so I decided to publish them. This is a living document. Who is this for? You are doing research / data analysis with other tools but you are curious about R. Maybe it’s because… FOMO - You want to know what all the fuzz is about? You feel that your current workflow isn’t efficient, robust, or reproducible enough? There’s this one R package you would really like to use…? You tried R before and were overwhelmed, but would like to give it a second chance? Or, you are using R already, but you feel you lost track of all the recent changes and want an update on the state-of-the-Rt? I’m assuming … You have no real programming experience You are not particularly interested in computers or programming You want to get things done and you believe that R might help you with that Who am I? I have worked with R and other languages (Matlab, Python, …) professionally in a research context for almost 10 years. I sometimes teach R with The Carpentries (usually half/full day courses) and I have made some humble contributions to the R package ecosystem, {mifa} and {noah}, and contributed to a few others (e.g, {TextGrid}, {rlena}) What is R? R is a statistical computing and data analysis environment that is widely used in (bioinformatics, geoscience, digital humanities, …) and industry (finance, biosciences, pharmacology, …). It is a free and open source implementation of the S language, which was created in the 1970s with interactive data analysis in mind. That means: Interactive – R works like a really fancy pocket calculator that lets you make calculations, explore and plot data quickly and “on the fly”. Focussed on Data Analysis – More than in many other programming languages, data and statistics are at the core of R. That is, there are built-in data structures and functions that are meant to make data analysis easy. Some say R is a domain specific programming language. Others say it’s an environment for interactive data analysis that has a programming language. In any case, R can be a versatile &amp; powerful one-stop-shop for the whole data analysis workflow: The data science workflow Data collection Data cleaning &amp; transformation – also known as data wrangling, data munging, or “80% of data science” Data Visualisation Modeling – using classical statistics as well as machine learning Communication – e.g., in reports, papers, presentations or dashboards Data analysis is certainly R’s core application. However, some people claim that you can use R for everything… 10 cool things about R There are a lot of good reasons to learn R! Here are the 10 things that I like most about R: R is free and open source R is easy to get started R is a flexible language that grows with you R is well-documented R is expandable R has powerful data wrangling functions R has powerful data visualization functions R has powerful statistical methods R encourages reproducible research R has a truly awesome community We will have a closer look at all of these, and along the way we will play around with R and do a little hands-on data analysis, but before we start, let’s get something out of the way: There are some very good reasons not to learn R! "],["why-you-should-not-learn-r.html", "Why you should not learn R It is a considerable time investment There are good alternatives", " Why you should not learn R A picture of the evergreen stuck in the suez canal Regardless of what R enthusiasts will tell you, R is not the solution to every problem. It is a considerable time investment Coding needs practice! Depending on your previous experience with programming and your ability to “think like a computer”, R can have a steep learning curve. Even if you are an experienced programmer, R can be weird! For examples, see these videos. It will take a while before you can work efficiently in R and getting there can be a frustrating experience. This frustration may eventually pay off, but if you, for example, only do a small anaylsis every once in a while it may not be worth it. In any case: “Never change a winning team!” — If your current setup works well for you, don’t change it! There are good alternatives Proprietary Software Proprietary software like SPSS, SAS, Stata, and MPlus has customer support and often one recommended way to solve a certain kind of problem. R often has a multitude of ways to achieve the same goal. While this allows you to choose the tools that suit your needs, it also can be difficult. Often, commercial software also does a better job at guiding you on your path through the jungle of statistical tests and models. R arguably requires a better understanding of what your are trying to achieve. A gif of the R console cursor blinking expectantly Welcome to R! Here’s how you quit… Furthermore, some commercial tools are the gold standard for certain types of analyses and not all methods may be implemented in R. For example, handling missing data with Maximum Likelihood in MPlus is not possible in the equivalent R package, {MClust}. Free point-and-click alternatives There are also good free alternatives to R that don’t require any coding, for example… Data wrangling with OpenRefine or DataWrangler Stats with Jamovi or JASP Data visualisation with RAWgraphs, Flourish, DataWrapper, or Tableau Public A screenshot of Jamovi Jamovi - There are plenty of fish in the open source sea! :::spoiler OK, but… Once mastered, the expressiveness of programming is unmatched by any point-and-click tool. Moreover, coding is a valuable skill that is useful to have ‘under your belt’, even if you end up not using it much. Learning to code can also be a lot of fun. ::: Other scientific programming languages If you want a programming language that is more universally useful, you might want to learn Python instead. If you need a language that is equally focused on interactive scientific computing, but more modern and faster, Julia might be a better choice. :::spoiler OK, but… While R is certainly not as popular overall as Python or as fast as Julia, it is quite popular in the data analysis and research world and gives you access to a vast amount of amazing third-party tools (packages), as we will see later. ::: "],["r-is-free-and-open-source.html", "Reason 1 R is free and open source", " Reason 1 R is free and open source With R, there are no license fees or purchasing cost. This means lower cost and less bureaucracy! It also means that you can use R everywhere, and you can use any version of it at any time. That’s great for collaboration, sharing, and reproducibility. Another advantage of R being free and open source is that there are tens of thousands of third-party packages, and if anything is missing, you can create it yourself. Make no mistake: Free and open source does not mean unprofessional! The R project is very stable with a core team of computer scientists and statisticians guiding its development. Financially, the project is supported directly by companies such as RStudio and rOpenSci, who employ developers to improve R indirectly through people who contribute to the R project as part of their jobs (e.g., research software engineers, statisticians, data scientists). R even has peer-reviewed journals which academics use to get credited for working on improving R. It’s also common to see papers about new statistical methods that are accompanied by implementations in R. "],["its-easy-to-get-started.html", "Reason 2 It’s easy to get started 2.1 Why use RStudio? 2.2 Hands-on. First steps with RStudio", " Reason 2 It’s easy to get started Download and install R and RStudio, or give it a spin at rstudio.cloud. That’s it! Everything else you need can be set up from within RStudio. Well, actually … For some things, e.g., Bayesian statistic, you might also need to install RTools. RTools provides additional tools that don’t come with the standard R installation, such as a C/C++ compiler. However, you can always do that later. For reproducible research, you should also install Git. RStudio has a Git GUI built in, but personally I prefer Github Desktop. We will talk a bit about Git later, but it really deserves its own 90 minutes introduction, so we will keep it brief. For maximum reproducibility you could install Docker so that you can create an RStudio Docker container for each project, but that is way beyond the scope of this intro. 2.1 Why use RStudio? RStudio is a popular all-in-one user interface (Integrated Development Environment, IDE) for R. It provides many conveniences that make working with R easier. There are alternatives to RStudio, but R’s own GUI is not one of them: A screenshot of RGui R’s own GUI — The 90s called…they want their user interface back. 2.2 Hands-on. First steps with RStudio A screen capture of creating a script file in RStudio 2.2.1 Create a new project Open RStudio and create a new RStudio project in an empty folder. This is the first thing you should do for every project and the first step towards reproducibility: Every new R project gets it’s own folder in which all its data and files will live. If you ever move this folder to a new location or share it with someone else, nothing will break. Leave “Use version control” and “use renv” unchecked for now – we will get back to those later. 2.2.2 Operators In the console, try out some of R’s operators. R has all the operators that you would expect to find in a pocket calculator: arithmetic: + - * / ^ modular arithmetic: %% %/% relational: &lt; &gt; &lt;= &gt;= == != logical: &amp;&amp; || ! | &amp; parentheses for modifying precedence: (1 + 2) * 10 Give them a spin and see what happens. For example, what does 1 != 1.0 do? Use Enter to run commands, use ↑ and ↓ to recall previous commands. And don’t worry – you can’t hurt R, it has been through this before… Hello Operator meme 2.2.3 Create a script The console is useful to run quick throwaway commands but code that you want to keep belongs in a script file. R sripts still allow a very flexible console-like workflow, because you can run individual sections or lines as you please. Create a script file, type a few commands and run lines or sections using Ctrl + Enter or the buttons on the top right of the script panel. "],["a-flexible-programming-language-that-grows-with-you.html", "Reason 3 A flexible programming language that grows with you 3.1 Hands-on. R Programming 101", " Reason 3 A flexible programming language that grows with you R grows with your needs. You need very little boilerplate code to set up a new R project and start working efficiently – and sometimes the console is all you need! Right out of the box, R gives you a powerful tool belt for data anlysis. Moreover, beginners don’t need to worry about many of the programming concepts that are fundamental to working in other languages, such as control flow, because R’s vector-based approach to data manipulation will go a long way and many convenience functions take care of the nitty-gritty for you. Then, as you become better and more cofortable with R, you can start to utilise its full power and flexibility. While R is a functional language it supports different programming paradigms. It also allows powerful meta-programming techniques that are impossible in other languages. 3.1 Hands-on. R Programming 101 3.1.1 Data Types The data type determines what operations you can perform with a piece of data. The bread and butter of data types in R are numeric, logical, and character. 3.1.1.1 Numeric Numbers can be integer, decimal, or complex, but usually the difference does not matter. Sometimes, R might unexpectedly hit you with a number in scientific notation, e.g., 1e+23 – don’t worry, it’s still just a number and you can change the formatting if you like! 23 + 0.45 + 1e2 + 6i 3.1.1.2 Logical Can be either TRUE or FALSE (or their shorthands, T and F). These are often used to represent binary categorical variables, as function arguments, or as intermediate steps when selecting and filtering data. (TRUE || FALSE) != (F == T) 3.1.1.3 Character Also known as “strings”. Almost anything you type becomes a character string if you surround it with \"\" or ''. &quot;Hello World!&quot; 3.1.2 Assignment You can use &lt;- to assign values to variables (objects, in R lingo). Use the keyboard Shortcut Alt+- to save yourself some hand gymnastics. You can give your variables almost any name you want as long as the name starts with a letter. For long variable names, it is recommended to use “snake case”, which looks like this: my_firssst_variable :snake: a &lt;- 1 b &lt;- 9 a + b a &lt;- 10 # Quiz: what would a + b return now? Note how the newly created variables appear in the environment panel in RStudio, and how they get update when you assign a new value. :::spoiler Well, actually … Many other programming languages use = to assign values to variables. In R, you can (for the most part) also use = for assignment. Just be aware that it will let everyone now that you are not a true believer. You can also use -&gt; to assign from left to right: \"I'm feeling freaky!\" -&gt; x. It may not be a good idea to use this in your scripts too much, because it can make your code harder to read, but it sometimes comes in handy when you are messing around in the console. Finally, there’s &lt;&lt;-, which allows assignment to variables in an enclosing environment. This can be useful if you need to update global variables from within a function. However, this is far beyond the scope of this intro, and chances are you will never encounter a &lt;&lt;- in the wild. You can read more about R’s assignment operators here ::: 3.1.3 Comments As you can see in the example above, you can use # to leave comments in your script. Learn to write good comments and write comments gratuitously – your collaborators and future self will thank you for it! 3.1.4 Vectors When working with data in R, you will encounter two important data structures: vectors and data frames. In computer programming, data structures are a way to organize and process data efficiently. Vectors are made for storing values of the same data type (numerical, character, logical, …) in a particular order. To create a vector, you can use the “combine” function, c(). There are also the : and seq() functions, that can help you create a vector that contains a sequence of numbers: c(1,2,3,4) # create a vector manually 0:42 # a vector of all integer numbers from 0 to 42 42:0 # it also works backwards seq(1, 4, 0.1) # numbers 1.0 to 4.0 in 0.1 increments R is really good at working with vectors! See how easy it is to multiply all numbers by a scalar, get the mean, or sum all elements — all without using a loop or a temporary variable: x &lt;- c(1,2,3,4) # Create vector and assign to variable `x` x * 10 mean(x) sum(x) You can access specific positions of a vector using square brackets. You can also use this syntax to replace individual elements: x[1] # In R, indices start at 1 x[2:3] # use `:` to access a range of indices x[c(1,3)] # use a vector to access particular indices x[2:3] &lt;- 0 # replace 2nd and 3rd element with 0 Values in a vector can be named. This comes in handy, for example, if you need a simple key-value store: fav_food &lt;- c( Garfield = &quot;Lasagna&quot;, Popeye = &quot;Spinach&quot;, Obelix = &quot;Roast Wild Boar&quot; ) fav_food[&quot;Popeye&quot;] :::spoiler Here be dragons … When working with vectors, there are some pitfalls. Consider these examples: c(1, 2, &quot;a&quot;) c(FALSE, TRUE, 2, 3) x &lt;- 1:3 x[1] &lt;- TRUE x x[3] &lt;- &quot;3&quot; x c( c(1,2), c(3,4) ) c( 1, c(2,3,4)) c( c(TRUE, 0), c(TRUE, FALSE), c(TRUE, &quot;0&quot;)) What is happening here? Remember that vectors can only contain a single data type. If you are trying to mix data types, R will quietly (without throwing an error) coerce all data types to the lowest common denominator: Logical become numerical (0 and 1) and numerical become character. Vectors also can’t contain other vectors, so these get unnested. Character strings that happen to contain only numbers are nevertheless treated as characters. If you want R to treat them as numeric, you will have to explicitely tell it to do so, for example, with the as.numeric() function. If you need to store a sequence of mixed data types, you should instead use a data structure called list. ::: 3.1.5 Data Frames Usually, your research data will be more complex than just a single sequence of values. For this, R has data frames. Data frames are two-dimensional like a spreadsheet – with rows usually containing different observations and columns usually containing different variables. Rows and columns of a data frame can be named, and while row names have fallen out of fashion, it is good practice to give the columns of your data frames names that are easy to remember and easy to type. # You can make your own data frame by hand like this cool_numbers &lt;- data.frame( &quot;number&quot; = c(1,13,23,42), &quot;isPrime&quot; = c(FALSE, TRUE, TRUE, FALSE) ) # A quick way to access a single column of a data frame is with the `$` operator cool_numbers$number As for vectors, R comes out of the box with many more commands to create and modify data frames, select columns, and filter rows. You will eventually need to get familiar with these. However, in this short introduction we will skip these in favor of the more streamlined and beginner-friendly functions from the Tidyverse – more about that later. Everything is a vector. Did you notice that columns in a data frame are vectors? This means that everything that can be done with a vector can be done with a data frame column! In fact, all ‘atomic’ data types in R (numeric, characters, logical) are always stored as vectors – even a single number is actually a numerical vector of length one! This may seem like an uninteresting detail, but it’s actually a really powerful idea and the source of much of R’s strength! :::spoiler Wait, there’s more … R has a couple of other data structures that you will eventually encounter. The details are beyond the scope of this intro, but you can read more here.. This includes … Factor – Factors are numerical vectors that can take a fixed set of values (levels), whereby each level can be assigned a label. The levels may be ordered or unordered. If this reminds you of categorical and ordinal variables you are absolutely right – that’s where they are used most often. But be warned: While factors can be quite useful they are also a point of confusion for many R novices. List – Lists are similar to vectors, but they can contain a mix of data types and data structures, including other lists. Tibble – A ‘modern’ implementation of data frames, provided by the Tidyverse. Object – Objects can be used to organize functionality more effectively. For instance, the output of a statistical model may be an object that has various attributes and associated functions (methods). R even has three types of objects: R6, S3, and S4. Matrix – Not to be confused with data frames. If you are implementing statistical methods yourself, you will likely want to make use of R’s powerful matrix algebra functions. Otherwise, you likely won’t often have to work with matrices directly. Environment – Environments are a collection of R objects. They are implemented as a hashmap, which makes them a good alternative to named vectors for key-value stores if you care about speed. Understanding environments is central to a deep understanding of R, but as a beginner it’s nothing you need to worry about. ::: "],["r-has-great-documentation.html", "Reason 4 R has great documentation 4.1 Hands-on. Using the R help", " Reason 4 R has great documentation Are you wondering how you should ever remember all of the different R commands? Fear not! The Help panels is right there in RStudio and gives you access to all the documentation of all R functions that you have installed. You can search in the search box there, or type ?mysterious_function in the console. However, my favourite way to assess the help is to put the cursor on the function name and press F1 (similarly, you can use F2 to access the source code for anything – It is open source, after all!). RStudio has excellent fuzzy auto-complete and will assist you while you type. Use ↑, ↓, and ↹ to select one of the choices. There are excellent cheatsheets for popular packages available in the RStudio menu (Help &gt; Cheatsheets &gt; ...) Having documentation easily available right in RStudio helps to learn the basics quickly and stay in the flow while you code. It’s also worth mentioning that R’s Function documentation, package vignettes and package websites are usually well-written and comprehensive. If you ever run into a problem or an error message that you can’t figure out yourself, check Google, StackOverflow, RStudio Community, or the Twitter #RStats. There are also lots of blogs with tutorials written by other R users. 4.1 Hands-on. Using the R help Look at the help file for the mean() function, see what other arguments the function accepts Have a look at the cheatsheet for the RStudio IDE "],["r-is-expandable.html", "Reason 5 R is expandable 5.1 What is the Tidyverse? 5.2 Hands-on. Install packages, load data from a file", " Reason 5 R is expandable The full power of R unfolds when you tap into its vast ecosystem of third-party packages. There are literally tens of thousands of packages to make your life easier! There’s an R package for almost everything! See for yourself at rdrr.io or Metacran. Packages in CRAN, BioConductor, and Neuroconductor) are peer-reviewed and often written by domain experts. Many more packages are available on Github. And if there’s ever anything missing you can build it yourself – together with others across the globe. It’s fun and you will learn a lot! By the way: R can also integrate with Python, C, and other languages and interface with other software, such as MPLUS. 5.1 What is the Tidyverse? The Tidyverse is a set of R packages that share a common design philosophy. It aims to provide consistent user-friendly verb-based functions for common data-tasks and to iron out many of the idiosyncrasies of Base R. The Tidy Data that gives the Tidyverse its name is a table with one observation per row one variable per column column names that are easy to type and easy to remember The core idea is that, once the data is in tidy format, all the Tidyverse functions can be used seamlessly. A special operator, the pipe %&gt;% (see below), glues all the functions together. The Tidyverse is a relatively recent addition to the R package ecosystem but the design philosphy has really struck a chord with the R developer community and many packages are now following Tidyverse principles. As a result, the overall data analysis workflow in R has become much more streamlined and integrated over the last few years. Nevertheless, some people prefer base R, and many older packages will never change to a “tidy” design. Moreover, there are other popular alternatives to the Tidyverse, such as the {data.table} package. This leads to a bit of a schism in the R package ecosystem. 5.2 Hands-on. Install packages, load data from a file Often you will read data from external sources. For this example we will use a data set about climbing expeditions in the Himalaya that was provided by Tidy Tuesday. The data is provided as a CSV file (comma separated value), a popular plain text format for sharing data across the internet and we will load it straight into our computer’s memory from the web. :::info Excel files are bad for sharing data! Learn from the mistakes of others and instead use csv, json, feather, databases, … ::: To read the CSV file and turn it into a data frame we will use the read_csv() function. To use it, we first have to install the {tidyverse} package (if we haven’t already) and then load it. install.packages(&quot;tidyverse&quot;) library(tidyverse) peaks &lt;- read_csv(&#39;&lt;https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2020/2020-09-22/peaks.csv&gt;&#39;) :::info Usually, packages are collections of functions. The {tidyverse} package is a bit different, as it is actually a collection of packages — a meta-package. When you load it, it loads, other packages, including {ggplot2}, {readr}, and {dplyr}. For example, the read_csv() function is from the {readr} package. ::: Now that we have loaded the data, we can have a look at the first few rows with the glimpse() fnction – another function from the {tidyverse} package. glimpse(peaks) You can also get a more traditional spreadsheet-like view of the data frame by clicking its name in the Environment panel or running view(peaks). To better understand our data, let’s get some summary statistics. The {skimr} package provides a really nice function for this. Let’s install the package and then “skim” our data: install.packages(&quot;skimr&quot;) skimr::skim(peaks) Neat huh? This summary tells us quite a bit about our data! For example, we can see that there some peaks have only been sucessfully climbed resently, or not at all. There also appears to be an outlier in the first_ascent_year column – a peak that was succesfully climbed in the year 201. :::info The :: operator. The double colon :: between the package name and the function name is a way to call a function without first loading the package it is in. Thus, skimr::skim(peaks) is equivalent to library(skimr) skim(peaks) The :: is often used when the package is only needed for a single function call or to clarify (to R or the person reading the code) which package a function is coming from. This is particularly useful when there are functions with the same name in different packages. Another approach to solving this problem is the {conflicted} package. ::: "],["r-has-powerful-data-wrangling-tools.html", "Reason 6 R has powerful data wrangling tools 6.1 Hands-on. Wrangling Data", " Reason 6 R has powerful data wrangling tools R can connect to all sorts of data sources (Databases, SPSS, Stata, SAS, APIs, websites, …), and process many different types of data (tabular data, EEG, fMRI, eye tracking, Geodata, taxonomical data, p;honetic transcriptions…). The Tidyverse offers many convenience functions for common data manipulation tasks like splitting and merging columns, renaming, counting, sorting, and much more. At its core, are a handful of workhorse functions from the {dplyr} package for manipulating data frames: filter() – select rows (observations) select() – select variables (columns) mutate() – create new variables (columns) or change existing ones summarize() – aggregate rows, e.g, to calculate a column’s mean group_by() – split the data frame pivot_wider() and pivot_longer() – reshape the data 6.1 Hands-on. Wrangling Data Let’s try a simple data wrangling task using functions from the Tidyverse: Find all peaks that are higher than 7,000 metres and were climbed before 1980 Count which countries the climbers came from 6.1.1 Filter rows We can use the filter() function to select only the rows (observations) we want. Then we can use the count() function to count how many rows there are for each kind of first_ascent_country: before80_7k &lt;- filter(peaks, first_ascent_year &lt; 1980, height_metres &gt; 7000) count(before80_7k, first_ascent_country) 6.1.2 The %&gt;% operator (“pipe”) Above, we stored the result of the first function in an intermediate variables and then gave it to the second. There’s another way to chain functions that is often more convenient and readable: Use the pipe operator %&gt;% to pass data from one function to the next. You can read %&gt;% as “…and then…”. Use the keyboard shortcut Ctrl + Shift + M to make it. peaks %&gt;% filter(first_ascent_year &lt; 1980, height_metres &gt; 7000) %&gt;% count(first_ascent_country, sort = TRUE) %&gt;% filter(n &gt; 3) # ... the pipe can continue. Here, we filter all peaks that # were climbed more than 3 times Did you notice that the first argument of all functions (the data frame you want to operate on) has disappeared? The pipe operator fills that one in automatically. Indubitably, sir! 6.1.3 Create new columns with mutate() peaks %&gt;% select(peak_name, climbing_status, first_ascent_year, first_ascent_country) %&gt;% mutate(climbed_before80 = first_ascent_year &lt; 1980) 6.1.4 Split-apply-combine with group_by() and summarize() Use group_by() and summarize() together for powerful split-apply-combine operations: peaks %&gt;% filter(first_ascent_year &gt; 201) %&gt;% group_by(first_ascent_country) %&gt;% summarize(min_ascent = min(first_ascent_year, na.rm = TRUE)) %&gt;% arrange(min_ascent) Dealing with missing values. In R, there is a special value for missing data, NA. This is not a data type. That is, a value can be, e.g., numeric and missing (NA) at the same time, and a numeric vector can contain a mix of numbers and NA. 6.1.5 Other useful data wrangling functions # ... "],["r-has-powerful-data-visualisation-tools.html", "Reason 7 R has powerful data visualisation tools 7.1 Hands-on. Data Visualization", " Reason 7 R has powerful data visualisation tools Perhaps the most popular package for data visualization in R is {ggplot2}. It comes with the {tidyverse} package, but there are many other packages that extend the functionality of {ggplot2}, such as {ggforce} or {gganimate}. These packages share a unifying design principle, the Grammar of Graphics (hence the “gg”). At its core, the Grammar of Graphics is about mapping attributes of your data (such as the magnitude of a number or the category that an observation belongs to) to aesthetics of geometric objects (such as position and size of a point or the height and color of a bar), potentially after applying statistical transformations like counting or averaging observations. This foundation turns out to be extremely versatile and allows You can see examples of what is possible with {ggplot2} in the submissions for Tidy Tuesday – a weekly exercise for practicing data visualisation. Some people even use {ggplot2} to make generative Art! Mastering {ggplot2} can take a while. However, there are some websites that provide example code for different types of charts. The R graph gallery is particularly comprehensive. There are also packages like {esquisse} that provide you with an intuitive graphical user interface for using {ggplot2}. The {ggplot2} package itself is mainly limited to static graphs. However, packages like {plotly}, and {shiny} allow you to make interactive visualisations and dashboards with relative ease. Integration with JavaScript (e.g., D3.js) - the sky is the limit! 7.1 Hands-on. Data Visualization In a short intro like this, there is not enough time to dive deeply into {ggplot2}. # ... "],["powerful-statistical-methods-at-your-fingertips.html", "Reason 8 Powerful statistical methods at your fingertips 8.1 Hands-on. Statistical Modeling", " Reason 8 Powerful statistical methods at your fingertips Many simple stats are built into R (glm(), chisq.test() and many more). No additional packages needed! For more advanced analses there are often multiple packages. Best to ask a domain expert what they use (or Google). Here are just a few examples: GAM, HLM, Mixture Models… SEM with {lavaan} Robust stats with {WRS2} Time series with {forecast} {zoo}, {xts} Bayesian Statistics with {brms}, {rstanarm}, {rstan} Text mining with {tidytext} Machine learning with {tidymodels} Network analysis with {tidygraph} or {igraph} Meta analysis with {metafor} and {rmeta} 8.1 Hands-on. Statistical Modeling t.test() lm() Let’s try something more advanced… # ... "],["r-encourages-reproducible-research.html", "Reason 9 R encourages reproducible research 9.1 Make Self-contained Projects 9.2 Snapshot your development environment 9.3 Use Version control 9.4 Make reports reproducible 9.5 No more copy and paste! 9.6 More 9.7 Hands-on. Make your Research Reproducible", " Reason 9 R encourages reproducible research All the steps in your analysis are visible in your script files. While GUI-based workflows are not reproducible, well-written code provides documentation and data provenance. However, you have to make sure your code keeps doing what it does today! R can help you with that in a number of ways! 9.1 Make Self-contained Projects Organising your project as a self-contained RStudio project was the first step to reproducibility. RStudio Projects are portable, reproducible, self-contained, organized. All the files are where you expect them, and all filenames and paths are relative to the project directory. 9.2 Snapshot your development environment R changes quickly, packages get updated frequently, and function interfaces change. It can be really frustrating to find that your analysis from a few months ago suddenly does not run anymore, or that it fails to run on your collaborators computer. You can save yourself the trouble by storing a snapshot of your package library using the {renv} package. You can take this idea a step further by using Docker with Rocker - fully reproducible data analysis in a Docker container (virtual machine). 9.3 Use Version control Version control is like a time machine for your analysis. It is to code what the :floppy_disk: is to a Word document (but better). A popular version control tool is Git. Git allows you to… store the state of your project see changes you or others have made create parallel versions (branches) of your code and merge them back together restore a previous version of your project Safely collaborate with others on the same code and more Git deserves its own 90 minute intro. Learn to use Git, and use it often! 9.4 Make reports reproducible In an RMarkdown document, you can mix text, R code, and the output of that R code. With the click of a button, you can turn this into a self-contained document (an HTML page, a PDF, a Word file) that you can share with others. You can use this to make websites, slides, or even write papers. And if a reviewer asks you to exclude a subject? Remove the data point and click the button again — all the figures and stats update! Without ever leaving RStudio, RMarkdown allows you to make reports papers with {papaja}, {rticles} books with {bookdown} websites, blogs with {blogdown}, {hugodown}, {distill} slides with {xaringan}, {xaringanthemer} teaching with {learnR} RMarkdown with parameters for simple tools, recurring tasks/reports, … 9.5 No more copy and paste! Packages to make pretty APA tables for models, summary stats, … Interface with Microsoft Office - Excel, Word, PowerPoint with {officeR} 9.6 More {targets} - smart make-files for your analysis {orderly} - makes sure your reproducible reports are reproducible Test-driven development with {testthat} 9.7 Hands-on. Make your Research Reproducible 9.7.1 Use {renv} to store a snapshot of your package library Install the {renv} package, then – in your project initialize {renv} for your project and take a snapshot of the packages you use in your project: install.packages(&quot;renv&quot;) renv::init() renv::snapshot() This creates a private, per-project library, in which new packages will be installed. This library is isolated from other R libraries on your system. Later, you or your collaborators can recreate this library, with the exact package versions you used by running renv::restore(). 9.7.2 Take a snapshot of your code with Git # ... To utilize the full power of Git, you will have to learn a couple more things. However, you can already rest assured, that you can alway go back and see the changes you have made, and where things broke. Isn’t that a comforting feeling? 9.7.3 Make a reproducible report with RMarkdown # ... "],["the-r-community-is-awesome.html", "Reason 10 The R community is awesome! 10.1 Great free learning material 10.2 Podcasts", " Reason 10 The R community is awesome! We are almost at the end of this short intro to R. We barely scratched the surface of what R has to offer. I hope this helped you figure out whether R is for you. Of course I hope it made you want to learn more! If you do wnat to learn more, I think the best way is to practice and find other people to learn from. Luckily, R has a friendly, diverse and welcoming community that is very open to beginners. And because it is widespread, there’s always an R nerd nearby who’s willing to help. Don’t be afraid to ask questions, make mistakes, or write bad code! Here are some ideas how you could engage with the community: Twitter #RStats can help to keep track of all the new things (if you like Twitter …) Participate in Tidy Tuesday or Makeover Monday to sharpen your data wrangling and data visualisation skills and see how other people are approaching the same tasks. Read other people’s code on Github and co. Write your own package or contribute to packages. Join Meetups of R User Groups or create your own R user group 10.1 Great free learning material Because R is mainly used by (and taught to) non-computer scientists, there is a lot of learning material for non-techy people (books, videos, podcasts, blog posts) – amazingly, much of it is free and really good! 10.1.1 Blog Posts B Bloggers aggregates a number of R blogs. Also check out the searchable database of “R Posts you might have missed” 10.1.2 Books R for Data Science Book – An excellent overview of the Tidyverse ggplot2 – Elegant graphics for data analysis – A deep dive into {ggplot2} Advanced R – A deep dive into the R programming language Data Science in Education with R Introductory Statistics in Psychology using R Introduction to Statistical Learning – A classic introduction to machine learning using R. Make sure to also check out the - - - {tidymodels} – package for a more modern machine learning toolbelt in R R Packages – A deep dive into writing and publishing R packages. RMarkdown - The definitive Guide – A deep dive into RMarkdown RMarkdown for Scientists – A guide to RMarkdown aimed at researchers R for Education – A Handbook for Teaching and Learning with R and RStudio 10.1.3 Courses and Videos The Carpentries offer beginner R courses for reseachers. The material is available online, e.g., R for Social Sciences and R for Ecologists. You can also take a Carpentries R course at UiO Happy Git with R R for the rest of us offers a free beginners course. RStudio presentations There are many R Tutorials on YouTube. Also check Coursera and other MOOCs for free videos about R. 10.2 Podcasts The R podcast "],["wrap-up.html", "Wrap-Up", " Wrap-Up That’s it. I hope this was useful. We really only scratched the surface. If there are any questions, you can contact me! "],["references.html", "References", " References "]]
